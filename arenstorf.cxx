#include <iostream>
#include <cmath>

using namespace std; 

// f(R)
void f(double *f, const double*  const R, double r, double s, const double mu){
   
  r=sqrt((R[0]+mu)*(R[0]+mu)+R[1]+R[1]);
  s=sqrt((R[0]-1+mu)*(R[0]-1+mu)+R[1]+R[1]);

  f[0]=R[2];
  f[1]=R[3];
  f[2]=R[0]+2*R[2]-((1-mu)*(R[0]+mu)/(r*r*r))-mu*(R[0]-1+mu)/(s*s*s);
  f[3]=R[1]+2*R[2]-((1-mu)*(R[1])/(r*r*r))-mu*R[1]/(s*s*s);
}
   
 

int main(){

const double dt=0.001;
const double T= 100;
const int N= T/dt;

double r;
double s;

const double mu=0.012277471


double R[4];
R[0] = 0.994;
R[1] = 0;
R[2] = 0;
R[3] = -2.00158510637908;

double k1[4];
double k2[4];
double k3[4];
double k4[4];
double k5[4]
double Rtemp[4];


for(int i=0;i<N;i++){

  f(k1,R);  
  
  Rtemp[0] = R[0] + dt/5 * k1[0];
  Rtemp[1] = R[1] + dt/5 * k1[1];
  Rtemp[2] = R[2] + dt/5 * k1[2];
  Rtemp[3] = R[3] + dt/5 * k1[3]; 

  f(k2,Rtemp); 
    
  Rtemp[0] = R[0] + dt * (3/40*k1[0] + 9/40*k2[0]);
  Rtemp[1] = R[1] + dt * (3/40*k1[1] + 9/40*k2[1]);
  Rtemp[2] = R[2] + dt * (3/40*k1[2] + 9/40*k2[2]);
  Rtemp[3] = R[3] + dt * (3/40*k1[3] + 9/40*k2[3]);
  
  f(k3,Rtemp); 

  Rtemp[0] = R[0] + dt * (44/45*k1[0] - 56/15*k2[0] + 32/9*k3[0]);
  Rtemp[1] = R[1] + dt * (44/45*k1[1] - 56/15*k2[1] + 32/9*k3[1]);
  Rtemp[2] = R[2] + dt * (44/45*k1[2] - 56/15*k2[2] + 32/9*k3[2]);
  Rtemp[3] = R[3] + dt * (44/45*k1[3] - 56/15*k2[3] + 32/9*k3[3]);

  f(k4, Rtemp); 

  Rtemp[0] = R[0] + dt * (19372/6561*k1[0] - 25360/2187*k2[0] + 64448/6561*k3[0] - 212/729*k4[0]);
  Rtemp[1] = R[1] + dt * (19372/6561*k1[1] - 25360/2187*k2[1] + 64448/6561*k3[1] - 212/729*k4[1]);
  Rtemp[2] = R[2] + dt * (19372/6561*k1[2] - 25360/2187*k2[2] + 64448/6561*k3[2] - 212/729*k4[2]);
  Rtemp[3] = R[3] + dt * (19372/6561*k1[3] - 25360/2187*k2[3] + 64448/6561*k3[3] - 212/729*k4[3]);

  f(k5, Rtemp);


  //R in 5.Ordnung
  
  R[0] = R[0] + dt * (35/384*k1[0] + 500/1113*k3[0] + 125/192*k4[0] - 2187/6784*k5[0]);
  R[1] = R[1] + dt * (35/384*k1[1] + 500/1113*k3[1] + 125/192*k4[1] - 2187/6784*k5[1]);
  R[2] = R[2] + dt * (35/384*k1[2] + 500/1113*k3[2] + 125/192*k4[2] - 2187/6784*k5[2]);
  R[3] = R[3] + dt * (35/384*k1[3] + 500/1113*k3[3] + 125/192*k4[3] - 2187/6784*k5[3]);


  //R in 4.Ordnung

  R[0] = R[0] + dt * (5179/57600*k1[0] + 7571/16695*k3[0] + 393/640*k4[0] - 92097/339200*k5[0]);
  R[1] = R[1] + dt * (5179/57600*k1[1] + 7571/16695*k3[1] + 393/640*k4[1] - 92097/339200*k5[1]);
  R[2] = R[2] + dt * (5179/57600*k1[2] + 7571/16695*k3[2] + 393/640*k4[2] - 92097/339200*k5[2]);
  R[3] = R[3] + dt * (5179/57600*k1[3] + 7571/16695*k3[3] + 393/640*k4[3] - 92097/339200*k5[3]);


   cout << (i+1)*dt <<'\t'<< R[0]<< "\t" << R[1] <<endl;
  
}


 return 0;
}
