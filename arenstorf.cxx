#include <iostream>
#include <cmath>

using namespace std; 

// f(R)
void f(double *f, const double*  const R, double r, double s, const double mu){
   
  r=sqrt((R[0]+mu)*(R[0]+mu)+R[1]+R[1]);
  s=sqrt((R[0]-1+mu)*(R[0]-1+mu)+R[1]+R[1]);

  f[0]=R[2];
  f[1]=R[3];
  f[2]=R[0]+2*R[3]-((1-mu)*(R[0]+mu)/(r*r*r))-mu*(R[0]-1+mu)/(s*s*s);
  f[3]=R[1]-2*R[2]-((1-mu)*(R[1])/(r*r*r))-mu*R[1]/(s*s*s);
}
   
 

int main(){

double dt=0.1;
const double T= 20;
//const int N= T/dt;
double dtneu;
double t;

double r;
double s;

const double mu=0.012277471;

double Rstep[4];
double Rmax;

double R[4];
R[0] = 0.994;
R[1] = 0;
R[2] = 0;
R[3] = -2.00158510637908;

double R4[4];
double R5[4];

double k1[4];
double k2[4];
double k3[4];
double k4[4];
double k5[4];
double k6[4];
double k7[4];
double Rtemp[4];


int i=0;
while(T>t){
  i++;
  
  t+=dt;


//for(int i=0;i<N;i++){
  
  //t+=dt;
  
  //if(t>T) break;

  f(k1,R,r,s,mu);  
  
  Rtemp[0] = R[0] + dt/5.0 * k1[0];
  Rtemp[1] = R[1] + dt/5.0 * k1[1];
  Rtemp[2] = R[2] + dt/5.0 * k1[2];
  Rtemp[3] = R[3] + dt/5.0 * k1[3]; 

  f(k2,Rtemp,r,s,mu); 
    
  Rtemp[0] = R[0] + dt * (3.0/40.0*k1[0] + 9.0/40.0*k2[0]);
  Rtemp[1] = R[1] + dt * (3.0/40.0*k1[1] + 9.0/40.0*k2[1]);
  Rtemp[2] = R[2] + dt * (3.0/40.0*k1[2] + 9.0/40.0*k2[2]);
  Rtemp[3] = R[3] + dt * (3.0/40.0*k1[3] + 9.0/40.0*k2[3]);
  
  f(k3,Rtemp,r,s,mu); 

  Rtemp[0] = R[0] + dt * (44.0/45.0*k1[0] - 56.0/15.0*k2[0] + 32.0/9.0*k3[0]);
  Rtemp[1] = R[1] + dt * (44.0/45.0*k1[1] - 56.0/15.0*k2[1] + 32.0/9.0*k3[1]);
  Rtemp[2] = R[2] + dt * (44.0/45.0*k1[2] - 56.0/15.0*k2[2] + 32.0/9.0*k3[2]);
  Rtemp[3] = R[3] + dt * (44.0/45.0*k1[3] - 56.0/15.0*k2[3] + 32.0/9.0*k3[3]);

  f(k4, Rtemp,r,s,mu); 

  Rtemp[0] = R[0] + dt * (19372.0/6561.0*k1[0] - 25360.0/2187.0*k2[0] + 64448.0/6561.0*k3[0] - 212.0/729.0*k4[0]);
  Rtemp[1] = R[1] + dt * (19372.0/6561.0*k1[1] - 25360.0/2187.0*k2[1] + 64448.0/6561.0*k3[1] - 212.0/729.0*k4[1]);
  Rtemp[2] = R[2] + dt * (19372.0/6561.0*k1[2] - 25360.0/2187.0*k2[2] + 64448.0/6561.0*k3[2] - 212.0/729.0*k4[2]);
  Rtemp[3] = R[3] + dt * (19372.0/6561.0*k1[3] - 25360.0/2187.0*k2[3] + 64448.0/6561.0*k3[3] - 212.0/729.0*k4[3]);

  f(k5, Rtemp,r,s,mu);
  
  Rtemp[0] = R[0] + dt * (9017.0/3168.0*k1[0] - 355.0/33.0*k2[0] + 46732.0/5247.0*k3[0] + 49.0/176.0*k4[0] - 5103.0/18656.0*k5[0]);
  Rtemp[1] = R[1] + dt * (9017.0/3168.0*k1[1] - 355.0/33.0*k2[1] + 46732.0/5247.0*k3[1] + 49.0/176.0*k4[1] - 5103.0/18656.0*k5[1]);
  Rtemp[2] = R[2] + dt * (9017.0/3168.0*k1[2] - 3550./33.0*k2[2] + 46732.0/5247.0*k3[2] + 49.0/176.0*k4[2] - 5103.0/18656.0*k5[2]);
  Rtemp[3] = R[3] + dt * (9017.0/3168.0*k1[3] - 355.0/33.0*k2[3] + 46732.0/5247.0*k3[3] + 49.0/176.0*k4[3] - 5103.0/18656.0*k5[3]);
  
  f(k6, Rtemp,r,s,mu);
  
  Rtemp[0] = R[0] + dt * (35.0/384.0*k1[0] + 500.0/113.0*k3[0] + 125.0/192.0*k4[0] - 2187.0/6784.0*k5[0] + 11.0/84.0*k6[0]);
  Rtemp[1] = R[1] + dt * (35.0/384.0*k1[1] + 500.0/113.0*k3[1] + 125.0/192.0*k4[1] - 2187.0/6784.0*k5[1] + 11.0/84.0*k6[1]);
  Rtemp[2] = R[2] + dt * (35.0/384.0*k1[2] + 500.0/113.0*k3[2] + 125.0/192.0*k4[2] - 2187.0/6784.0*k5[2] + 11.0/84.0*k6[2]);
  Rtemp[3] = R[3] + dt * (35.0/384.0*k1[3] + 500.0/113.0*k3[3] + 125.0/192.0*k4[3] - 2187.0/6784.0*k5[3] + 11.0/84.0*k6[3]);
  
  f(k7, Rtemp,r,s,mu);
  

  //R in 5.Ordnung
  
  R5[0] = R[0] + dt * (35.0/384.0*k1[0] + 500.0/1113.0*k3[0] + 125.0/192.0*k4[0] - 2187.0/6784.0*k5[0] + 11.0/48.0*k6[0]);
  R5[1] = R[1] + dt * (35.0/384.0*k1[1] + 500.0/1113.0*k3[1] + 125.0/192.0*k4[1] - 2187.0/6784.0*k5[1] + 11.0/48.0*k6[1]);
  R5[2] = R[2] + dt * (35.0/384.0*k1[2] + 500.0/1113.0*k3[2] + 125.0/192.0*k4[2] - 2187.0/6784.0*k5[2] + 11.0/48.0*k6[2]);
  R5[3] = R[3] + dt * (35.0/384.0*k1[3] + 500.0/1113.0*k3[3] + 125.0/192.0*k4[3] - 2187.0/6784.0*k5[3] + 11.0/48.0*k6[3]);


  //R in 4.Ordnung

  R4[0] = R[0] + dt * (5179.0/57600.0*k1[0] + 7571.0/16695.0*k3[0] + 393.0/640.0*k4[0] - 92097.0/339200.0*k5[0] + 187.0/2100.0*k6[0] - 1.0/40.0*k7[0]);
  R4[1] = R[1] + dt * (5179.0/57600.0*k1[1] + 7571.0/16695.0*k3[1] + 393.0/640.0*k4[1] - 92097.0/339200.0*k5[1] + 187.0/2100.0*k6[1] - 1.0/40.0*k7[1]);
  R4[2] = R[2] + dt * (5179.0/57600.0*k1[2] + 7571.0/16695.0*k3[2] + 393.0/640.0*k4[2] - 92097.0/339200.0*k5[2] + 187.0/2100.0*k6[2] - 1.0/40.0*k7[2]);
  R4[3] = R[3] + dt * (5179.0/57600.0*k1[3] + 7571.0/16695.0*k3[3] + 393.0/640.0*k4[3] - 92097.0/339200.0*k5[3] + 187.0/2100.0*k6[3] - 1.0/40.0*k7[3]);

  
  //Schrittweitenbestimmung
  
  Rstep[0]=abs(R4[0]-R5[0]);
  Rstep[1]=abs(R4[1]-R5[1]);
  Rstep[2]=abs(R4[2]-R5[2]);
  Rstep[3]=abs(R4[3]-R5[3]);
  
  Rmax=Rstep[0];
  
  for(int j=0; j<4; j++){
    if(R[j]>Rmax)
      Rmax=R[j];
    else continue;
  }

  dtneu=dt*(pow(10,-5)/Rmax);
  dt=dtneu;
  
  //Mit den Werten der 4. Ordnung sollen die neuen k-Vektoren bestimmt werden
  
  for(int k=0; k<4; k++){
    R[k]=R4[k];
  }

   
   cout << t <<'\t'<< R[0]<< "\t" << R[1] <<endl;
  
}


 return 0;
}
